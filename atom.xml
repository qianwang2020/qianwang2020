<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.qianqian.fun</id>
    <title>汪小白的博客</title>
    <updated>2020-09-09T17:18:32.677Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.qianqian.fun"/>
    <link rel="self" href="https://blog.qianqian.fun/atom.xml"/>
    <subtitle>用勤劳的双手换取想要的生活</subtitle>
    <logo>https://blog.qianqian.fun/images/avatar.png</logo>
    <icon>https://blog.qianqian.fun/favicon.ico</icon>
    <rights>All rights reserved 2020, 汪小白的博客</rights>
    <entry>
        <title type="html"><![CDATA[摩尔斯电码]]></title>
        <id>https://blog.qianqian.fun/post/mo-er-si-dian-ma/</id>
        <link href="https://blog.qianqian.fun/post/mo-er-si-dian-ma/">
        </link>
        <updated>2020-09-09T06:33:11.000Z</updated>
        <content type="html"><![CDATA[<p>在长期的 Coding 过程中，我们是否有思考过，什么是编码？一定是视图去了解过的，我们了解到一些专业的词汇，比如说“代码”、“指令”、“解释器”、“编译器”、“汇编”、“反编译”。要理解这些词汇并不那么容易，甚至我们可能迷失在其中。</p>
<p>所以，这一篇文章从摩尔斯电码说起，因为大家一定在各种谍战剧中看到过通过电报机发送情报的场景。从它入手，能够让我们更接近我们平时写的代码的本质。</p>
<p>摩尔斯电码是要解决人与人远程的交流，而我们所谓的代码是要解决人与计算机的交流。</p>
<h2 id="什么是摩尔斯电码">什么是摩尔斯电码</h2>
<p>摩尔斯电码是一名叫做摩尔斯的美国发明家发明的，但是它并不具备制作发报机的能力。所以他请另一个美国的发明家以及机械师,名字叫做阿尔弗莱德·维尔制作了通过时断时续的无线电来传输信息的发报机。</p>
<p>摩尔斯电码本身并不依赖无线电，也可以通过各种无线电外的各种途径来发送信号，比如说通过手电筒的开关以及时间上的间隔也可以发送这种编码。</p>
<p>说了那么多，那么摩尔斯电码是什么？其原理是什么呢？其实非常简单。我们先来看一下发报机:</p>
<figure data-type="image" tabindex="1"><img src="https://blog.qianqian.fun/post-images/1599633355480.png" alt="" loading="lazy"></figure>
<p>照片中的这台机器就是发报机，也称之为电台。它有一个按键，称之为电键。这个发报员的右手的一个手指放在电键上。电键有两种形式的按法: 一种是短按(Dot)，会发出短的电子脉冲信号;一种是长按（Dash), 会发出长的电子脉冲信号。于是就可以通过 Dot 和 Dash 的组合，对我们的文字进行编码，发出消息。另外，这种电台，通常是收发一体的，从照片中，你也可以看到这个人的头上戴着耳机，可以用来监听长短间隔不同的“滴滴”声。</p>
<h2 id="摩尔斯电码的编码">摩尔斯电码的编码</h2>
<p>上文我们说到，通过 Dot 和 Dash 这两种长短信号，就可以模拟任意的文本内容。那么具体的规则是什么呢？我们来看一下摩尔斯电码表，你很容易就看懂了:</p>
<figure data-type="image" tabindex="2"><img src="https://blog.qianqian.fun/post-images/1599633985652.png" alt="" loading="lazy"></figure>
<p>你看懂了吗？比如说我要发送一条消息: Hello World, 通过电台上的电键以及它的两种按法， Dot(表格中的 <code>.</code> )以及 Dash(表格中的 <code>-</code> ):</p>
<pre><code>(H)短按、短按、短按、短按
(E)短按
(L)短按、长按、短按、短按
(L)短按、长按、短按、短按
(O)长按、长按、长按、长按
...等待几秒钟，表示一个单词结束了
(W)短按、长按、长按
(O)长按、长按、长按、长按
(R)短按、长按、短按
(L)短按、长按、短按、长按
(D)长按、短按、短按
...结束
</code></pre>
<p>原理是不是很简单，所以通过这个你就明白了通过这段短按和长按两种形式就可以表示所有的我们人类能够识别的文字。</p>
<p>摩尔斯电码除了可以表示字符以外，还可以表示数字、短语等任意你希望的文本，甚至你可以用你自定义的编码来表示你传达的消息都可以，只要和接收方约定好就行。比如 SOS, 按照国际通行的规范，其摩斯电码为<code>···---···</code>。</p>
<p>另外，这样的设计也并不是那么随意，有一些常用的字母会使用短按更多，而不常用的字母会使用长按更多。</p>
<p>如何对电码进行解码呢？带着耳机监听“滴滴声”，然后把听到的声音记录在一张纸条上，在将纸条上的内容翻译成英文、中文...... 但是这样带来了一个问题，就是对照上面的表格速度太慢了。于是，对上面的表格进行归纳总结，可以得出下面这个二叉树，对照它相对会快很多:</p>
<figure data-type="image" tabindex="3"><img src="https://blog.qianqian.fun/post-images/1599634175907.png" alt="" loading="lazy"></figure>
<h2 id="从摩尔斯电码到计算机">从摩尔斯电码到计算机</h2>
<p>摩尔斯电码是一种编码形式，它也采用 dot 和 dash 这种类二进制，使用这种编码可以表达任意你想表述的内容。不一定要使用电报机，你可以使用手电筒这种可见光，甚至在特殊的情况下你可以使用眨眼皮的形式来秘密传达消息。</p>
<p>摩尔斯电码解决了人与人之间的消息传递问题，至今全球都分布着很多的无线电爱好者，他们仍然在始终这种编码。而计算机的出现，使得人与人之间的通信变得更为方便，迅速。但是两者之间传送消息的原理并没有太多的不同，都是采用了二进制来表述一切我们希望表达的内容。</p>
<p>所以，当你听到我们计算机内部使用的是二进制的时候，不要惊讶。当你得知使用二进制可以表示图片、文本、音乐、视频也无需感到奇怪。所以，在写代码的时候，从高级语言(比如说 Go) 编译为中间语言(比如说 C 语言), 然后从中间语言编译为汇编语言，最后从汇编语言转换为 CPU　可以识别的二进制指令，你要很清楚，原理就是编码的转换。</p>
<p>参考资料</p>
<ol>
<li><a href="https://book.douban.com/subject/4822685/">《编码:隐匿在计算机软硬件背后的语言》</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81">维基百科-摩尔斯电码</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E5%B0%94%E5%BC%97%E8%8E%B1%E5%BE%B7%C2%B7%E7%BB%B4%E5%B0%94">维基百科-阿尔弗莱德·维尔</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%90%A8%E7%BC%AA%E5%B0%94%C2%B7%E6%91%A9%E5%B0%94%E6%96%AF">维基百科-萨缪尔·摩尔斯</a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[终端复用器：tmux]]></title>
        <id>https://blog.qianqian.fun/post/zhong-duan-fu-yong-qi-tmux/</id>
        <link href="https://blog.qianqian.fun/post/zhong-duan-fu-yong-qi-tmux/">
        </link>
        <updated>2020-08-19T08:20:38.000Z</updated>
        <content type="html"><![CDATA[<p>使用 Linux，我们绝大多数的时候看到的都是黑漆漆的画面，是有一些枯燥的。但是，能不能在枯燥的画面中，玩些花样呢？<br>
比如说，我们模拟一个多窗口的环境，可以在多个窗口之间切换。再比如说，模拟一个多桌面的环境，不同的桌面包含不同的窗口。<br>
要实现上面这些功能，我们就需要清楚这篇文章的主角了 —— tmux。</p>
<h2 id="安装-tmux">安装 tmux</h2>
<p>如果是 CentOS：</p>
<pre><code>$ sudo yum install tmux
</code></pre>
<p>如果是 macOS:</p>
<pre><code>$ brew install tmux
</code></pre>
<h2 id="创建和销毁会话">创建和销毁会话</h2>
<p>在 tmux 中，有一个 Session 的概念，和桌面是一样的意思。一个 Session 可以包含多个窗口( Window ）。如何创建 Session 呢？</p>
<pre><code>$ tmux new -s &lt;Session Name&gt;
</code></pre>
<p>查看已经创建的 Session：</p>
<pre><code>$ tmux ls
</code></pre>
<p>进入已经创建的 Session：</p>
<pre><code>$ tmux a -t &lt;Session Name&gt;
</code></pre>
<p>如果要临时退出会话, 使用 <code>ctrl+b</code> ，然后按下 <code>d</code> 。<br>
如果要销毁会话，使用 <code>ctrl+b</code> ，然后按下 <code>:</code> 进入命令模式，输入命令: <code>kill-session</code> 。</p>
<h2 id="模拟多窗口的环境">模拟多窗口的环境</h2>
<p>窗口是基于 Session 的，所以需要先进入一个 Session。然后创建窗口，需要使用 <code>Ctrl + b</code> , 然后按下  <code>c</code> 键:<br>
<img src="https://blog.qianqian.fun/post-images/1599553600554.png" alt="" loading="lazy"><br>
我们看到下面显示着一行绿色的状态栏，内容如下:<br>
<img src="https://blog.qianqian.fun/post-images/1599553606953.png" alt="" loading="lazy"><br>
你看到上面切换的窗口序号了吗？我们可以根据这个切换窗口，比如要切换到第一个窗口，就可以按下组合键: <code>Ctrl + b</code> , 然后按下 <code>1</code> ，这里的 <code>1</code> 就是窗口的序号。<br>
我们看到，起 Window 的默认命令规则是采用了命令提示符，如果要重命名呢？ <code>Ctrl+B</code> ,然后按下 <code>,</code> 。<br>
如果我们要暂停这个会话，回到最初的界面呢？ <code>Ctrl + B</code> ，然后按下 <code>d</code> 。</p>
<h2 id="分割窗口">分割窗口</h2>
<p>一个窗口可以切换成多个 Pane(面板)。使用 <code>Ctrl+B</code> ，然后按下 <code>&quot;</code> 可以创建水平面板，按下 <code>%</code> 可以创建垂直面板。<br>
如果需要切换全屏，可以使用 <code>Ctrl+B</code> ,然后按下 <code>z</code> 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python环境的搭建]]></title>
        <id>https://blog.qianqian.fun/post/python-huan-jing-de-da-jian/</id>
        <link href="https://blog.qianqian.fun/post/python-huan-jing-de-da-jian/">
        </link>
        <updated>2020-08-03T09:03:59.000Z</updated>
        <content type="html"><![CDATA[<p>本文就 python 开发环境的安装配置做一些说明。</p>
<h2 id="python-版本的选择">Python 版本的选择</h2>
<p>Python 采用了两段式的版本号 <code>&lt;Main&gt;.&lt;Subject&gt;</code> , 比如当前最新版本是 3.8。大的版本号分为 2.X 和 3.X。没有例外，应该全部选择 3.X 版本，2.X 已经走入了历史。</p>
<p>在 3.X 的众多版本中，其增加了如下的特性:</p>
<h2 id="python-30">Python 3.0</h2>
<p>• 函数注解（ Function Annotations ），可以对函数的参数和返回值进行注解。除了可以通过 <code>__annotations__</code>来访问这些注解外，没有其他更多的语义；<br>
• 仅限关键字形参（ Keyword-only arguments ），在函数形参中使用 <code>*</code> 来表示对应的形参必须使用关键字进行传递；<br>
• <code>nonlocal</code> 语句允许嵌套函数中的内部函数对外层函数作用域中的变量进行赋值；<br>
• 扩展的 Iterable 解包，比如 <code>(a, *rest, b) = range(5)；</code>；<br>
• 集合字面量，字典推导，新的八进制字面量，以 <code>b</code> 或 <code>B</code> 开头的字节串等等；</p>
<h2 id="python-31">Python 3.1</h2>
<p>• 有序字典 <code>collections.OrderedDict</code>；<br>
• 千位分隔符的格式说明符，比如 <code>'{0:,d}'.format(1234567) —&gt; '1,234,567'</code>；</p>
<h2 id="python-32">Python 3.2</h2>
<p>• Argparse 命令行解析模块；<br>
• 基于字典的日志配置 <code>logging.config.dictConfig()</code> 可以支持更灵活的配置方式；<br>
• concurrent.futures 模块 ；<br>
• 将字节码文件单独存储在 <code>__pycache__</code> 目录；</p>
<h2 id="python-33">Python 3.3</h2>
<p>• 虚拟环境工具 venv 和 pyvenv，后者 pyvenv 在 Python 3.6 中已弃用；<br>
• 隐式命名空间包；<br>
• OS 和 IO 异常的层次结构优化；<br>
• 委托给子生成器 <code>yield from</code>；<br>
• 允许禁用链式异常上下文的显示从而获取更干净的错误消息，比如 <code>raise AttributeError(attr) from None</code>；</p>
<h2 id="python-34">Python 3.4</h2>
<p>• pip 默认包含在 Python 的二进制安装程序中；<br>
• 异步 I/O 库 asyncio；<br>
• 支持枚举的模块 enum；<br>
• 面向对象的文件系统路径模块 pathlib；<br>
• 高级 I/O 复用模块 selectors；<br>
• 用于数学统计的模块 statistics；</p>
<h2 id="python-35">Python 3.5</h2>
<p>• 使用 async 和 await 语法实现原生协程 ；<br>
• 矩阵乘法运算符 <code>a @ b</code> ；<br>
• 类型标注支持的模块 <code>typing</code>；<br>
• 进一步扩展带有 <code>*</code> 的可迭代对象解包操作和带有 <code>**</code> 的字典解包操作；</p>
<h2 id="python-36">Python 3.6</h2>
<p>• 文字字符串插值，比如 <code>f&quot;He said his name is {name}.</code>&quot;；<br>
• 用于进一步增强类型标注的变量注释语法，比如 <code>names: List[str] = []</code>；<br>
• 异步生成器，允许在 <code>async / await</code> 中使用 <code>yield</code>；<br>
• 使用 <code>async for</code> 进行异步推导；<br>
• 用于生成高加密强度的随机数、密码、安全凭证的模块 <code>secrets</code>；</p>
<h2 id="python-37">Python 3.7</h2>
<p>• 延迟的类型标注求值；<br>
• 用于 Python 调试的内置 <code>breakpoint()</code> 函数；<br>
• 用于支持上下文变量的 <code>contextvars</code> 模块；<br>
• 声明数据类的 <code>dataclass()</code>，比如：</p>
<pre><code>@dataclass
class Person:
    name: str
    height: float
    weight: float = 130.0
p = Point('Bob', 175.5)
print(p)   # 输出 &quot;Person(name=Bob, y=175.5, z=130.0)&quot;
</code></pre>
<h2 id="python-38">Python 3.8</h2>
<p>• 赋值表达式语法 <code>:=</code>；<br>
• 仅限位置形参（ Positional-only parameters ），在函数形参中使用 <code>/</code> 来表示对应的形参必须使用位置进行传递。</p>
<h2 id="pip-的使用">Pip 的使用</h2>
<p>pip 是 Python 自带的一个包管理的工具，可以使用对项目中的依赖进行管理。就其基础的使用，如下实例:</p>
<pre><code>pip install &lt;package&gt; [package...]    ## 安装一个多多个包
pip install &lt;package&gt;==2.21.0         ## 安装指定版本的包
pip install --upgrade &lt;package&gt;       ## 升级指定的包
pip uninstall &lt;package&gt;               ## 卸载指定的包
pip list                              ## 打印已经安装的包的列表
pip freeze &gt; requirements.txt         ## 生成已经安装的软件包的列表，并重定向到 requirements.txt 文件中
pip install -r requirements.txt       ## 根据 requirements.txt 文件中的内容安装项目所需依赖
</code></pre>
<p>如果在使用 pip 的过程中出现安装超时的现象，可能是因为国外服务器在国内不稳定的缘故，可以换成豆瓣的镜像服务器下载资源，这样会快很多。编辑配置文件 <code>~/.pip/pip.conf</code> ， 内容如下:</p>
<pre><code>[global]
index-url = https://pypi.doubanio.com/simple
trusted-host = pypi.doubanio.com
</code></pre>
<h2 id="jupyter-notebooks">Jupyter Notebooks</h2>
<p>首先安装 Anaconda， 在其官方页面上下载安装包安装即可。安装的过程中，建议勾选，将可执行文件加入 PATH 的选项。</p>
<p>在 Anaconda 中已经包含了 Jupyter Notebooks ，直接在命令行下运行即可:</p>
<pre><code>jupyter notebook
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[正义不会缺席]]></title>
        <id>https://blog.qianqian.fun/post/zheng-yi-bu-hui-que-xi/</id>
        <link href="https://blog.qianqian.fun/post/zheng-yi-bu-hui-que-xi/">
        </link>
        <updated>2020-07-25T06:59:54.000Z</updated>
        <content type="html"><![CDATA[<p>最近关于来女士的案子在网上广为流传，虽然我们都希望她平安无事，但天不遂人愿。从出事到今天警方发布案子通告，真相虽然已经浮出水面，但是相信很多人都想不通，为什么枕边人竟就是那个凶手，当然我也没想明白，为什么好好的日子过成了这样。十年修得同船渡，百年修得共枕眠，原本应该相亲相爱携手渡百年的夫妻却以如今这段惨剧收场了，可怜他们那小女儿，这段经历在她心里也许永远都挥之不去。</p>
<p>究其原因竟然只是因为家庭琐事意见不合，在此我真的想说，广大同胞们，凡事都是可以心平气和的讨论的，遇事要及时沟通，不要积在心里。不要走极端，走极端就容易出问题，以上就是活生生的例子啊。有什么事情过不去非要以这种方式来解决呢。最后发生这种事的原因只是一个导火线，也许就是因为没有及时沟通，有些事日积月累，就导致了这样的恶果。那个作为凶手的丈夫，他但凡想着点家庭，孩子，及时沟通的话，也不会生出犯罪的想法，更不会酿成这样的惨案。</p>
<p>事已至此，我就希望来女士能安息，愿天堂没有恶魔。我希望凶手能诚心悔过，承担应有的责任，我更希望他们的小女儿能忘记这段过去，走出这个阴影，阳光快乐的生活。我还想说不要想着犯罪，无论你有多高明，我们的人民警察一定能抓住你，只不过事时间问题。要记住，天网恢恢，疏而不漏，正义也许会迟到，但是永远不会缺席！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一个完整的前后端应用（Flask）]]></title>
        <id>https://blog.qianqian.fun/post/yi-ge-wan-zheng-de-qian-hou-duan-ying-yong-flask/</id>
        <link href="https://blog.qianqian.fun/post/yi-ge-wan-zheng-de-qian-hou-duan-ying-yong-flask/">
        </link>
        <updated>2020-07-12T10:07:17.000Z</updated>
        <content type="html"><![CDATA[<p>我一直认为，不管是前端，还是后台，或是测试，都应该去做一个完整的包含前后端的应用。只有这样，你才能清楚明白前后端交互的逻辑，只有这样，技术生涯才算完整(如果愿意它更完整，也可以玩玩测试、运维等角色扮演)。</p>
<p>这篇文档的目的，就是用一个最小的 DEMO 来完成一个前后端对接的过程。我选择了发表说说这样一个谁都知道，谁都体验过的功能。</p>
<h2 id="技术选型">技术选型</h2>
<p>在开始一个项目之前，有一项工作叫做技术选型，即需要用什么技术去完成这个项目。没有统一的标准，但有一些思考维度:</p>
<p>• 你选择的技术你是否能够熟练掌握应用<br>
• 你选择的技术你团队中的其他人是否熟练掌握应用<br>
• 你选择的技术是否适合你将要开始的项目<br>
• 选择这项技术你所需的成本，包括用人成本、学习成本、时间成本以及维护成本等<br>
• 你的老板、同事、领导、客户等是否喜欢<br>
• 技术本身是否成熟、社区是否活跃、官方或第三方是否仍旧维护等<br>
• 其他一切你有所顾忌的因素</p>
<p>在这个应用中，我选择了小程序作为前端，而非 APP 或者传统的 Web 技术栈(JavaScript、HTML、CSS)。原因是，小程序相对其他的技术，环境容易布置、文档齐全、学习门槛比较低以及比较贴近实际。</p>
<p>在这个应用中，我选择了 Python + Flask 作为后端技术，原因是这系列文章就是专门讲 Python 的和 Flask 的。这个应用本身，也是为了巩固大家对 Python + Flask 的基础知识的。</p>
<h2 id="业务说明">业务说明</h2>
<p>这个应用就只有一个页面，当我们进入这个页面的时候，会讲历史的说说全部展示在列表中，此外，我们也可以在文本框中输入新的说说，然后点击【发表说说】按钮发布说说内容，发布之后，列表中出现新的说说，并且清空文本框中的说说。原型图如下:</p>
<figure data-type="image" tabindex="1"><img src="https://blog.qianqian.fun/post-images/1599559804873.png" alt="" loading="lazy"></figure>
<h2 id="前端业务编写">前端业务编写</h2>
<p>首先，我们需要先创建一个新的页面，命名为 index, 在 pages 目录下。 在小程序里一个页面有三个文件:</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th>作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>index.js</td>
<td>用来书写业务逻辑</td>
</tr>
<tr>
<td>index.wxml</td>
<td>用来书写页面元素骨架</td>
</tr>
<tr>
<td>index.wxss</td>
<td>用来书写页面样式</td>
</tr>
</tbody>
</table>
<p>这个应用中，暂时不包括 index.wxss 文件的代码，为了不增加编码的复杂度。所以我们写的真实应用可能还不如原型图好看。</p>
<p>需要注意的是，每个创建的页面都要在 app.json 中的 <code>pages</code> 中注册, 使用小程序开发者工具中的新建 Page 按钮会自动注册:</p>
<pre><code>{
  &quot;pages&quot;: [
    &quot;pages/index&quot;
  ]
  ......省略
}
</code></pre>
<p>前端业务的编写主要分为三个部分:</p>
<ol>
<li>页面的骨架，这是最先编写的内容，即页面上有什么内容？文案、图片、按钮？</li>
<li>页面的样式，就是对页面的美化，这部分也包括动画交互</li>
<li>页面的逻辑，包括与用户的交互和与服务端的交互</li>
</ol>
<h2 id="编写页面元素骨架">编写页面元素骨架</h2>
<p>首先我们要编写页面元素的骨架, 即 index.wxml 文件, 代码如下:</p>
<pre><code>&lt;view&gt;
    &lt;input placeholder=&quot;请输入你想说的&quot; bindinput=&quot;onChange&quot; value=&quot;{{say}}&quot; /&gt;
    &lt;button bindtap=&quot;onTap&quot;&gt;发表说说&lt;/button&gt;
    &lt;view&gt;你的说说列表:&lt;/view&gt;
    &lt;view wx:for=&quot;{{list}}&quot;&gt;
      {{item}}
    &lt;/view&gt;
&lt;/view&gt;
</code></pre>
<p>小程序是组件化编程，所以页面上的元素都是一个个的组件。上面的代码中，包含如下组件:</p>
<table>
<thead>
<tr>
<th>组件</th>
<th>作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>view</td>
<td>视图组件，可以包含其他任何组件，也作为最外层组件。</td>
</tr>
<tr>
<td>input</td>
<td>输入框组件。接收文本输入。</td>
</tr>
<tr>
<td>button</td>
<td>按钮组件。一般用于触发用户的触摸屏幕的事件，然后执行某些操作。</td>
</tr>
</tbody>
</table>
<p>可以看得出，为了不增加编码复杂度。我们只用了三个小程序官方提供的组件。</p>
<p>在上面的代码中，有几种特殊的写法讲解一下，但是这并不是专门讲小程序开发的教程，所以不会讲得非常细致，点到为止。</p>
<p>在组件中，可以包含一些组件地属性, 用来改变组件地外观样式或者行为。比如下面这行代码，我们使用 <code>placeholder</code> 属性来改变当用户没有输入地时候地提示文案: 请输入你想说的。</p>
<pre><code>&lt;input placeholder=&quot;请输入你想说的&quot; /&gt;
</code></pre>
<p>另外，我们还有一个属性地值比较奇怪, 在 input 组件中，我们对 value 组件赋值为 <code>{{say}}</code> ，这说明 say 是一个变量，而不是一个类似于 &quot;请输入你想说的&quot; 这样地字面量(写死地值)。</p>
<pre><code>&lt;input placeholder=&quot;请输入你想说的&quot; value=&quot;{{say}}&quot; /&gt;
</code></pre>
<p>还有一些属性比较奇怪，属性名都是 <code>bind</code>开头, 这些属性是事件的绑定。<strong>什么是事件呢？比如用户单击了某个按钮，微信小程序需要通知我们的程序，用户点击了这件事情，以此出发我们对这个事件预定的操作</strong>。</p>
<pre><code>&lt;input bindinput=&quot;onChange&quot; /&gt;
</code></pre>
<p>这个组件中有一个事件，名字叫做 <code>bindinput</code> , 其含义是当用户输入的时候就会触发这个事件，然后微信小程序会去调用我们预定的方法 <code>onChange</code>。</p>
<p>类似的还有下面这个 <code>button</code> 组件的 <code>ontap</code> 事件，当用户触摸这个按钮，然后就会出发这个事件，然后微信小程序会去调用我们预定的方法 <code>onTap</code> 。</p>
<pre><code>&lt;button bindtap=&quot;onTap&quot;&gt;发表说说&lt;/button&gt;
</code></pre>
<p>对于说说的列表，我们不可能知道它到底有多少数量，所以我们应该使用循环语句讲其循环出来。即服务端返回多少，我们就展示多少。为了降低程序的复杂度，这里并不涉及到分页:</p>
<pre><code>&lt;view wx:for=&quot;{{list}}&quot;{{item}}&lt;/view&gt;
</code></pre>
<p>这当中的 <code>item</code> 是微信小程序内置的变量，只用在循环块中( <code>&lt;view wx:for=&quot;{{list}}&quot;&gt;...&lt;/view&gt;</code> ，即省略号所在的位置)。</p>
<h2 id="编写页面逻辑">编写页面逻辑</h2>
<p>以前，我的编程老师在课上说，要写一个程序首先应该把这个程序中的变量都罗列出来。如果你把变量都罗列出来了，那么这个程序也就完成一半了。</p>
<p>那时候，我并不是很理解这句话，一个程序那么复杂，为什么定义变量就完成一半了。后来知道了，因为定义了所有的变量，你也就知道程序改怎么写了。</p>
<p>所以，我们要完成页面逻辑的编写，首先要分析页面，定义出页面逻辑中需要的变量。通过分析，我们需要两个变量，如下:</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>变量类型</th>
<th>作用描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>say</td>
<td>String</td>
<td>用来保存我们在 input 组件中输入的说说文本</td>
</tr>
<tr>
<td>list</td>
<td>Array</td>
<td>用来保存我们 list 中的数据</td>
</tr>
</tbody>
</table>
<p>在 index.js  文件中，加入变量定义的代码：</p>
<pre><code>Page({
  data: {
    say: '',
    list: [],
  }
})
</code></pre>
<p>我们已经定义了变量了，并且为这两个变量赋予了初始值。这里要额外说一说，小程序采用数据驱动编程的思想，即我们只需要定义变量，然后再 JS 中更改变量的值，页面中使用了这些变量的元素将会自动更新变量的值。</p>
<p>下面的讲解就描述了这个过程。</p>
<p>上面我们已经定义了两个变量，分别是 <code>say</code> 和 <code>list</code> ,那么这两个变量什么时候会改变呢？当然是当某些事件被触发的时候:</p>
<p>• 页面加载的时候，我们会从后端请求说说列表的数据，然后改变 <code>list</code> 的值，当我们改变了 <code>list</code> 的值，小程序会自动更新页面中的列表，这就是数据驱动。</p>
<p>• 当用户再 input 组件中输入文本的时候，会触发 input 组件的 bindinput 事件，在其 onChange 方法中，我们会更新 say 的值</p>
<p>• 当用户触摸“发表说说”按钮的时候，会触发 button 组件的 bindtap 事件，在其 onTap 方法中，我们会改变 list 的值，将 say 这变量中保存的文本加入到 list 数组中。为了让下一次用户输入说说，免去删除之前的说说的操作，我们会自动清楚 say 的值，文本框中的值也会由微信小程序自动清除。</p>
<p>所以，我们的页面逻辑其实也是围绕着这两个变量展开的，要由我们去完成这些会改变变量的事件，然后小程序会自动重新渲染我们的页面，使得我们的页面可以呈现最新的数据。</p>
<p>首先，我们要来写 input 组件的 onChange 事件, 在这个事件中，我们只要完成一件事情就可以了，就是将用户在文本框中输入的值，赋值给 <code>say</code> 这个变量，在小程序中，如果要为变量赋值，可以使用 <code>this.setData</code> 方法:</p>
<pre><code>Page({
  onChange: function (event) {
    // 需要说明的是，小程序会主动调用这个方法，并传递 event 这个参数，当中包含了事件相关的数据
    this.setData({
      // event 变量中，我们之关系 event.detail.value 这个值，这保存着文本框中用户的内容
      // 不要问我怎么知道是保存在 event.detail.value 中的，是看微信官方文档知道的
      say: event.detail.value
    })
  },
})
</code></pre>
<p>接着，我们要来完成当用户触摸“发表说说”按钮时，触发 Button 按钮的 bindtap 事件，微信会调用 <code>onTap</code> 方法，在这个方法中，我要要完成四件事情:</p>
<ol>
<li>检查说说内容是否为空，因为输入空的说说没有任何意义</li>
<li>往说说列表中加入新的说说，其实就是更改 list 变量的值</li>
<li>发送说说给服务端，因为说说最终要保存到数据库，否则下次进来就数据就丢了</li>
<li>清空说说文本框的内容，其实是将 say 的值改为 '' 空字符串</li>
</ol>
<p>详细的代码如下:</p>
<pre><code>// 检查说说是否为空
if (this.data.say === '') {
  wx.showToast({
    title: '说说不能为空哦'
  })
}
// 往说说的列表中添加新的说说
this.data.list.push(this.data.say)
this.setData({
  list: this.data.list
})
// 发送说说给服务端，保存说说到数据库
wx.request({
  url: 'http://116.85.30.153:5000/list/save',
  method: 'post',
  data: {
    say: this.data.say
  }
 })
// 清空说受输入框
this.setData({
  say: ''
})
</code></pre>
<p>最后，我们要完成页面的 onLoad 方法，当页面加载的时候，微信小程序会执行这个方法。所以我们要在这个方法中，去请求服务端，获取数据库中保存的数据，并加载到列表中(改变 list 的值)：</p>
<pre><code>onLoad: function (options) {
    wx.request({
      url: &quot;http://116.85.30.153:5000/list&quot;,
      success: (response) =&gt; {
          this.setData({
            list: response.data
          })
      }
    })
}
</code></pre>
<p>关于上面 () =&gt; {} 这样的写法叫做箭头函数，可以参考文本 附录: 箭头函数 章节。</p>
<p>到此为止，我们就完成了整个页面逻辑的编写了。实际上，再怎么复杂的功能，也都是由这些逻辑堆叠的。</p>
<h2 id="附录-箭头函数">附录: 箭头函数</h2>
<p>这里需要说明的是，上文中 success 的函数采用了 JavaScript ES6 规范中的语法，箭头函数。这个函数也可以换一种写法:</p>
<pre><code>onLoad: function (options) {
  // 因为 this 的作用域是变化的，不能在 success 的回调函数中使用，所以给 that 赋值保存其内容
    const that = this    
    wx.request({
      url: &quot;http://116.85.30.153:5000/list&quot;,
      success: function (response) {
          // 这里就不能使用 this 了,因为这里的 this 的指向是 function () {} 本身，所以使用事先保存的 that
          // 因为 that 才具有 setData 这个方法
          that.setData({
            list: response.data
          })
      }
    })
}
</code></pre>
<p>你看，上面这种写法是不是很麻烦？在 JavaScript 语言中， this 它的指向是一个不容易搞懂的问题，经常会因此出错。所以，在新的规范中，创造了箭头函数这样的写法，功能上和普通的函数是一样的，只是它不存在 this 指向问题，可以直接在 success 回调函数中使用 this 变量，而不用事先将 this 赋值给一个变量(示例中使用 that）。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[压力测试工具ab]]></title>
        <id>https://blog.qianqian.fun/post/ya-li-ce-shi-ab/</id>
        <link href="https://blog.qianqian.fun/post/ya-li-ce-shi-ab/">
        </link>
        <updated>2020-06-27T05:45:57.000Z</updated>
        <content type="html"><![CDATA[<p>首先，我找到一个人的 blog，网址是https://blog.codingnow.com/，我想对这个页面进行压力测试，怎么做？我们使用ab工具来进行测试，centos8 的发行版就自带了这个软件。</p>
<pre><code>ab -n500 https://blog.codingnow.com/
</code></pre>
<p>返回比较慢，我们换一个网址：</p>
<pre><code>ab -n3000 http://165.84.180.25/index.html
</code></pre>
<p><code>-n</code> 是指定我们的请求数，一共请求了 3000 次<br>
<img src="https://blog.qianqian.fun/post-images/1598507506230.png" alt="" loading="lazy"><br>
你看，结果中显示我们的服务器每秒大概可以处理 4961.70 个这样的请求，但是我们这个只是静态页面。<br>
然后我们来测试一下我们之前写的 hello 接口：<br>
<img src="https://blog.qianqian.fun/post-images/1598507943315.png" alt="" loading="lazy"></p>
<pre><code>ab -n1000 http://165.84.180.25/WeChat.Message/hello
</code></pre>
<p><img src="https://blog.qianqian.fun/post-images/1598508112520.png" alt="" loading="lazy"><br>
明显慢了很多<br>
<img src="https://blog.qianqian.fun/post-images/1598508013114.png" alt="" loading="lazy"><br>
每秒只能处理 15.96 个请求<br>
<img src="https://blog.qianqian.fun/post-images/1598508370974.png" alt="" loading="lazy"><br>
应该是这样的结果<br>
<img src="https://blog.qianqian.fun/post-images/1599551466506.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[什么是 Linux]]></title>
        <id>https://blog.qianqian.fun/post/shi-me-shi-linux/</id>
        <link href="https://blog.qianqian.fun/post/shi-me-shi-linux/">
        </link>
        <updated>2020-06-10T08:32:34.000Z</updated>
        <content type="html"><![CDATA[<p>简单的说， Linux 和 Windows 、macOS 一样，都是操作系统，而操作系统本质上来讲也是一种软件(超大型的软件，代码量都在千万级以上)。</p>
<p>Linux 对于我们最大的意义在于，绝大多数的服务器上都使用 Linux 作为操作系统。我们的产品的开发、测试也都在 Linux 系统上进行操作。</p>
<h2 id="搭建-linux-环境">搭建 Linux 环境</h2>
<p>搭建 Linux 环境大致有两种做法，一种是在本地(虚拟机)模拟一台服务器，然后安装 Linux 系统。另外一种就是选择云服务器厂商购买一台在线的服务器。</p>
<p>我更倾向于第二种方式，更加的快捷方便，但是需要一定的学习成本。第一种方式，对本地电脑的配置有一定要求，但是成本相对较低。</p>
<p>如果选择云服务器产品的话，可以选择阿里云、腾讯云、百度云、京东云、滴滴云、青云等等。滴滴云的成本最低，阿里云的应用较为广泛。对于初期学习而言，其实也都差不多，生产环境一般会选择阿里云或者腾讯云，如果是服务国外，可能会选择阿里云、Google Cloud Platform 以及亚马逊云。</p>
<h2 id="什么是发行版">什么是发行版</h2>
<p>在购买服务器的时候，会要求选择操作系统，当然我们会选择 Linux，另外还会要求选择 Linux 的发行版。那么什么是发行版呢？</p>
<p>简单的来说，我们平时所说的 Linux 指的是 Linux 内核(可以理解成 Linux 的核心）。不同的厂商、组织、开发者会针对某一版本的 Linux 内核做一些优化、加装一些软件形成自己的发行版本。</p>
<p>常见的发行版有 CentOS、RedHat、Ubuntu、Debian 等等。生产环境一般选用 CentOS, 而学习的话可以选择 CentOS 或者 Ubuntu。不严谨的定义，如下:</p>
<pre><code>Linux 发行版 = Linux 内核 + 其他的软件
</code></pre>
<p>接下来的系列文章，都会采用 CentOS 7.6 版本或者更高。</p>
<h2 id="初识命令行">初识命令行</h2>
<p>相对于 Windows，我们所有的操作都是在图形化的界面中完成的，Linux 的所有操作都可以在命令行中完成。这样的操作更加的原始，但却更加的快速有效。</p>
<p>另外，Linux 的服务器一般都在异地的大型机房中，我们都需要通过网络连接去操作它。使用命令行传输指令相对于传出图形界面，会占用更小的带宽，传输更快。</p>
<p>Linux 的命令行界面一般如下图所示:</p>
<figure data-type="image" tabindex="1"><img src="https://blog.qianqian.fun/post-images/1599554112148.png" alt="" loading="lazy"></figure>
<p>初学者对于这样的界面是困惑的，黑漆漆的背景，几个不知道含义的文本，不知道怎么做。但是我相信，你很快就会喜欢上这样的界面，因为它非常的高效，极客。</p>
<p>这就是命令行，你可以用各种各样的命令去做任何你想做的事情，前提是你需要理解命令的运作机制，这是学习 Linux 的第一道门槛，跨过去！</p>
<p>我们使用操作系统，通常是为了使用一些基于操作系统的软件，不管是聊天软件还是游戏软件或者是浏览器。因为在 Linux 中，我们通常都是使用命令行的，所以没有平时使用 Windows 中看到的哪些界面。而所谓的命令，其实就是一个个的软件，我们通过下面这种方式去运行，而不是通过鼠标去界面上点击：</p>
<figure data-type="image" tabindex="2"><img src="https://blog.qianqian.fun/post-images/1599554549565.png" alt="" loading="lazy"></figure>
<p>你看，你平时使用微信或者QQ，是不是要鼠标双击 QQ或者微信的图标啊，那么在命令行中，我们并不需要用鼠标，只需要输入 QQ 就可以了。另外，当你打开QQ 的界面的时候，你需要告诉QQ你的用户名和密码，而在 命令行中使用命令行参数来告诉运行的软件一些信息, 比如 <code>--username</code>  和 <code>--password</code> 。</p>
<p>所以，你其实不用恐惧命令行，学习 Linux 其实就是学习这些软件怎么使用，就和你学习微信、QQ 如何使用一样，只是稍微比微信、QQ 这样的软件要复杂一点点。</p>
<p>所以，究其本质来说，命令行和图形化界面没有什么区别，只是一个是通过文本来运行软件，一个是通过界面来简化软件的使用罢了 。理解这一点很重要！</p>
<h2 id="常用的命令">常用的命令</h2>
<p>下面介绍一些常用的软件(命令), 不要去死记硬背，只要常常去用就好了。首先，我们创建一个文件夹, 这个文件夹名字叫做 <code>test</code> ：</p>
<pre><code>## 创建一个名为 test 的文件夹
mkdir test
## 把当前的目录切换到名为 test 的文件夹
cd test
## 创建一个文件
touch test.txt
## 查看文本内容
cat test.txt
## 查看当前所在的目录
pwd
## 计算 1 + 1
expr 1 + 1
</code></pre>
<p>你会发现，如果熟练掌握了这些命令，那种用鼠标去点击各种按钮的操作会显得非常没有效率。接下来，我们来安装一个软件:</p>
<pre><code>sudo yum install wget -y
</code></pre>
<p>相对上面的命令，这个看上去要复杂很多,解释一下:</p>
<p>如果你登录的账户是 root 用户，并不需要使用 sudo 就可以拥有安装软件的权限。因为 root 是 Linux 中权力做大的用户。否则，你可能需要使用 sudo 去提升你的权限，sudo 的意思就是 super to do ，使用超级管理员的权限去做某件事。</p>
<p>yum 是 CentOS 发行版中使用的软件管理工具，你可以使用它来安装一些软件，就像是 Windows 上的 360 软件管家。</p>
<p>install 是 yum 的子命令，表示安装。</p>
<p>wget 是要安装的名字。而 -y 是说直接安装，不需要我确认了。</p>
<p>我举一个 qq 发送消息的例子:</p>
<pre><code>qq send hello -to bob
</code></pre>
<p>这条命令翻译过来就是: 使用 qq 这个软件发送给 bob 这个人一条消息，消息的内容为 &quot;hi&quot; 。</p>
<p>这个 wget 是干什么的呢？就像是 Windows 上的迅雷，用来下载文件的:<br>
wget http://downloads.end.wiki/hello.txt</p>
<p>用法非常简单，后面跟上文件的地址就可以了。</p>
<h2 id="使用网络学习命令">使用网络学习命令</h2>
<p>其实命令行就这么简单，不需要死记硬背，用到的时候去查一下，多用用就好了。下面推荐一个地址，用来学习、搜索各种命令:  [ Linux 命令大全(手册) ] [ https://www.linuxcool.com/ ]。这个网站对命令提供了搜索功能，对一些常见的命令还进行了分类:</p>
<figure data-type="image" tabindex="3"><img src="https://blog.qianqian.fun/post-images/1599555382438.png" alt="" loading="lazy"></figure>
<h2 id="使用-man-手册">使用 man 手册</h2>
<p>如果有一个人问我，这条命令怎么用，我会告诉他去问那个男人(man)。在 Unix/Linux 这个男人大名鼎鼎，比谁都更了解 Unix/Linux。其实 man 并不是指男人的意思，而是英文单词 manuals 的缩写，意为手册。</p>
<pre><code>man man
</code></pre>
<p>man 是 Unix/Linux 系统手册，我们可以使用 man 来查看 man 命令的帮助:</p>
<pre><code>man - an interface to the on-line reference manuals
</code></pre>
<p>它是一个在线的参考手册的接口，首先是参考手册，然后你自己的程序也可以实现它的接口，提供程序的帮助信息。</p>
<p>这个参考手册分为若干的章节(section)，如下:</p>
<ol>
<li>章节 1 : 一般的命令</li>
<li>章节 2 : 系统调用</li>
<li>章节 3: C 库函数</li>
<li>章节 4: 特殊文件</li>
</ol>
<p>比如我们查询 sh 这条 Shell 的命令，可以使用如下方式:</p>
<pre><code>man 1 sh
</code></pre>
<p>然后关于 <code>sh</code>  这条命令的显示信息如下:</p>
<figure data-type="image" tabindex="4"><img src="https://blog.qianqian.fun/post-images/1599555628348.png" alt="" loading="lazy"></figure>
<p>按下 <code>q</code> 可以退出，按下 <code>CTRL+F</code> 可以翻页。</p>
<h2 id="更换镜像源">更换镜像源</h2>
<p>由于某种不能抗拒的原因，国内访问国外的网站、服务都特别的慢。当我们使用 Yum 去安装各种软件的时候，由于服务器都在国外，经常会安装失败或者速度慢到不能忍受。</p>
<p>这时候，我们可以尝试更换成国内的镜像源。比如说阿里云、腾讯云等服务商会定时去同步国外 Yum 的官方服务器资源到国内自己的服务器上。当我们使用 Yum 去更新或安装的时候，就会比较快。</p>
<pre><code>## 备份原有配置文件
sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
## 下载源配置文件
sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.cloud.tencent.com/repo/centos7_base.repo
## 清理缓存并重建立
sudo yum clean all
sudo yum makecache
</code></pre>
<p>上面是 CentOS7 的实例，其他的发行版或不同的版本请访问腾讯官方：腾讯 CentOS 源帮助文档。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux常用的命令-基础]]></title>
        <id>https://blog.qianqian.fun/post/linux-chang-yong-de-ming-ling-ji-chu/</id>
        <link href="https://blog.qianqian.fun/post/linux-chang-yong-de-ming-ling-ji-chu/">
        </link>
        <updated>2020-05-16T07:21:57.000Z</updated>
        <content type="html"><![CDATA[<p>这一篇文档记录了一些常用的命令，以备学习查询之用。并将这些命令进行分类整理，方便检索。</p>
<h2 id="export-环境变量">export-环境变量</h2>
<p>你知道什么是环境变量吗？如果你不知道，你应该运行这条命令：</p>
<pre><code>$ export
declare -x HISTCONTROL=&quot;ignoredups&quot;
declare -x HISTSIZE=&quot;1000&quot;
declare -x HOME=&quot;/home/dc2-user&quot;
declare -x HOSTNAME=&quot;10-255-0-106&quot;
declare -x LANG=&quot;en_US.UTF-8&quot;
declare -x LESSOPEN=&quot;||/usr/bin/lesspipe.sh %s&quot;
declare -x LOGNAME=&quot;dc2-user&quot;
......省略
</code></pre>
<p>是的，使用 <code>export</code> 可以将当前环境下的变量全部打印在屏幕上。所以说，环境变量的本质还是变量，只是这些变量会随着环境的变化而变化，比如登录用户发生了变化。<br>
有没有想过为什么会有环境变量的存在？<br>
举个例子，我写了一个程序，它需要调用 Java 程序去执行某些事情。但是很快我就遇到了问题，在我的机器上程序运行没有问题，换了朋友的机器就运行不了了。原来是因为朋友的机器上没有安装 Java。他安装了 Java，还是运行不了。为什么？原来是因为它安装的目录和我不一样。<br>
通过这个例子，你应该明白了吧？有些因素是和环境相关的，这些环境相关的因素是软件的开发者在软件的编写的时候无法预知的。这就需要环境本身来告诉我。还是以上面这个例子继续说:<br>
在安装 Java 程序的时候，需要设置 Java 程序的环境变量，比如说 JAVA_HOME 。这样其他的程序在调用 Java 的时候就知道 Java 安装在哪里了。<br>
除了 Java 安装在哪里，还需要知道当前登录的用户名是什么？当前用户的 Home 目录在哪里？临时目录在哪里？等等等等。 这就是环境变量存在意义：告诉环境中运行的软件，一些在他们的开发者开发的时候不能预测的因素 。<br>
除此之外， <code>export</code> 还可以设置环境变量，如下示例:</p>
<pre><code>$ export my_var=my_var_value
$ echo $my_var   ## my_var_value
</code></pre>
<h2 id="history-历史命令">history-历史命令</h2>
<p>使用 <code>history</code> 命令可以查看我们输入的命令的历史:</p>
<pre><code>$ history
    1  python --version
    2  pip --version
    3  sudo yum install python3
</code></pre>
<p>默认情况下，使用 <code>history</code> 命令输出的每一行都是由序号以及命令组成的，如果我想改变这个格式呢？可以通过设置环境变量的方式，改变 <code>history</code>  命令输入的格式，比如加入命令的执行时间:</p>
<pre><code>$ export HISTTIMEFORMAT='%F %T '
$ history
    1  2020-07-13 22:29:04 python --version
    2  2020-07-13 22:29:04 pip --version
    3  2020-07-13 22:29:04 sudo yum install python3
</code></pre>
<p>你有没有发现，这几条命令的执行时间都是一样的？是因为这些命令执行的时候，并没有通过设置 <code>HISTTIMEFORMAT</code> 环境变量的方式开启“记录命令执行时间戳”的功能，所以就以其最近记录的时间戳的命令为准。</p>
<pre><code>$ history | tail -n 3
  165  2020-07-13 22:41:19 cat
  166  2020-07-13 22:41:26 echo ok
  167  2020-07-13 22:41:33 history | tail -n 3
</code></pre>
<p>然后我们现在在执行几条命令， 发现时间都不一样了，对吧。另外，我们还可以设置记录历史命令的数量:</p>
<pre><code> $ echo $HISTSIZE     ## 默认为 1000
 $ export $HISTSIZE=2000
</code></pre>
<p>如果要清空历史记录，可以使用 <code>history -c</code>删除内存中记录的命令。但是，实际上命令是记录在 <code>.bash_history</code> 这个文件中的，所以真正要删除命令，避免下次登录的时候重新加载该文件中的内容，可以使用 <code>history -w</code>命令。<br>
下表记录了，<code>history</code> 命令相关的环境变量:</p>
<table>
<thead>
<tr>
<th>变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>HISTCONTROL=erasedups</td>
<td>清除整个命令中的重复条目</td>
</tr>
<tr>
<td>HISTCONTROL=ignoredups</td>
<td>忽略记录命令历史中连续重复的命令</td>
</tr>
<tr>
<td>HISTCONTROL=ignorespace</td>
<td>忽略记录空格开始的命令</td>
</tr>
<tr>
<td>HISTCONTROL=ignoreboth</td>
<td>等价于 ignoredups 和 ignorespace</td>
</tr>
</tbody>
</table>
<p>如果要执行上一条命令，可以使用 <code>!!</code> , 如果要执行历史命令中的某一条命令，可以使用 <code>!&lt;序号&gt;</code> :</p>
<pre><code>$ !!         ## 执行上一条命令
$ history
    1  clear
    2  history
    3  cat ~/.bash_history
$ !3
</code></pre>
<h2 id="date-系统时间">date-系统时间</h2>
<p>在 Windows 上，我们可以通过查看状态栏，得知现在是什么时候了。而在 Linux 中，我们通过什么命令来知晓时间呢？——  <code>date</code> 。</p>
<pre><code>$ date
Tue Jul 14 13:25:30 CST 2020
如果是 CentOS/7 发行版，我们可以使用下面这个命令:
$ timedatectl
      Local time: Tue 2020-07-14 13:30:18 CST     ## 本地时间
  Universal time: Tue 2020-07-14 05:30:18 UTC     ## 世界协调时间
        RTC time: Tue 2020-07-14 05:30:18         ## RTC 芯片的时间
       Time zone: Asia/Shanghai (CST, +0800)      ## 时区
  .....省略
</code></pre>
<p>如果时区不对，对造成各类服务时间错误，与第三方对接授权错误，所以应该使用如下命令调整时区：</p>
<pre><code>$ timedatectl set-timezone &quot;Asia/Shanghai&quot;   # 设置时区
$ timedatectl list-timezones    # 查看所有时区
</code></pre>
<p>注意： 建议将时区全部设置为上海，因为一般大型的互联网企业都在上海设置数据中心。在与这些服务商通信的时候，可以尽可能避免因为细小的时间差距从而导致的错误。<br>
另外，受限于硬件的精准度，所以我们需要启动 NTP 时间同步服务，与授时服务器定时同步时间，以保证时间的准确:</p>
<pre><code>$ timedatectl set-ntp true
</code></pre>
<h2 id="time-你的程序跑的有多快">time-你的程序跑的有多快</h2>
<p>我们可以使用 time 来查看程序运行花了多少的时间:</p>
<pre><code>$ time php -i &gt;&gt; /dev/null
php -i &gt;&gt; /dev/null  0.06s user 0.01s system 95% cpu 0.074 total
</code></pre>
<p>上面这条命令的含义是我们使用 <code>time</code> 来测试 <code>php -i &gt;&gt; /dev/null</code> 这条命令花了多长的时间，其输出的解释如下:</p>
<pre><code>命令 用户态时间 user 内核态时间 system CPU占用 cpu 总共花费时间 total
</code></pre>
<p>所以，这条命令 CPU 的运算时间是 用户态时间+ 内核态时间，而总共花费的时间减去 CPU 的运算时间是中间等待 CPU 分片的时间。</p>
<h2 id="htop-查看cpu-内存-进程">htop-查看CPU、内存、进程</h2>
<p>在大多数的 Linux 发行版中，都使用 top 来实时查看系统资源，比如 CPU、内存以及进程的相关信息。现在，我们可以使用 htop 来代替 top 这个程序了。使用 htop 更加的简洁易用、直观明了。<br>
可以使用包管理工具来安装 htop, 比如在 CentOS8 下，可以使用 <code>sudo dnf install htop -y</code> 。<br>
然后输入 <code>htop</code> 即可查看系统资源占用情况, 如下图所示:<br>
<img src="https://blog.qianqian.fun/post-images/1599549979877.png" alt="" loading="lazy"><br>
可以按下 <code>F1</code> 来查看帮助，可以使用 <code>q</code> 或者 <code>F10</code> 退出程序。可以使用 <code>F4</code> 过滤进程， 使用 <code>F5</code> 排序，按下 <code>t</code> 可以查看进程的父子层级。按下 <code>u</code> 可以显示所有进程的用户列表，并根据用户列表来过滤进程信息。<br>
更多的用户可以参考帮助信息:<br>
<img src="https://blog.qianqian.fun/post-images/1599550091813.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用虚拟环境]]></title>
        <id>https://blog.qianqian.fun/post/shi-yong-xu-ni-huan-jing/</id>
        <link href="https://blog.qianqian.fun/post/shi-yong-xu-ni-huan-jing/">
        </link>
        <updated>2020-05-08T09:18:36.000Z</updated>
        <content type="html"><![CDATA[<p>为什么需要使用虚拟环境呢？因为在不同的项目中，我们使用的环境会有差别。比如 A 项目使用 Flask1.0 版本，B 项目使用 Flask1.1 版本。在不使用虚拟环境的情况下，两个版本就不能共存。这时候，你总不能使用两台机器来开发两个项目吧？</p>
<p>虚拟环境在 Python 的世界里应运而生，但这也成了大部分人学习它的一道门槛。总的来说，有两个问题，不知为何物，不知有何用？</p>
<p>在 Python3 之前，社会提供了好多方案，这有时候会让人难以选择。在 Python3 之后，官方提供了 venv 模块，可以方便的使用。</p>
<h2 id="为什么不使用虚拟机">为什么不使用虚拟机</h2>
<p>我不知道有没有人和我有一样的困惑，但是官方对此是有说明的:</p>
<pre><code>The `venv` module provides support for creating lightweight “virtual environments” with their own site directories, optionally isolated from system site directories.
</code></pre>
<p>关键词是 lightweight，意思是轻量级的。这大概也是 Python 社区选择这类解决方案的原因。但是随着 Docker 等虚拟化技术的发展、普及，我觉得这类基于系统目录的虚拟环境方案会被取代。</p>
<h2 id="创建虚拟环境">创建虚拟环境</h2>
<p>首先我们需要创建一个工作目录, 用于存放很多的项目:</p>
<pre><code>mkdir workspace &amp;&amp; cd workspace
</code></pre>
<p>然后我们创建一个项目，名字叫做 venv_test：</p>
<pre><code>mkdir venv_test &amp;&amp; cd venv_test
</code></pre>
<p>然后创建虚拟环境:</p>
<pre><code>python -m venv .
</code></pre>
<p><code>venv</code> 是 python 官方提供的一个模块，要调用这个模块，需要使用 <code>python -m</code>。或者你也可以将 venv 理解成 python 内置的一条命令，它支持一个参数，指定创建虚拟环境的目录，在上面的示例中，<code>.</code> 表示的是当前目录。就是在当前目录创建一个虚拟环境。</p>
<h2 id="激活虚拟环境">激活虚拟环境</h2>
<p>接着，我们需要激活虚拟环境，使用如下命令:</p>
<pre><code>source ./bin/activate
</code></pre>
<p>执行这条命令之后，我们可以看到在命令行在最前面出现了 <code>(venv_test)</code> 的提示，这个是我们的目录名称，提示我们已经进入了虚拟环境:</p>
<pre><code>(venv_test) [dc2-user@10-255-0-106 venv_test]$
</code></pre>
<p>接下来，我们所有的操作都是在虚拟环境里操作的，不影响虚拟环境之外的内容。</p>
<h2 id="在虚拟环境中安装依赖包">在虚拟环境中安装依赖包</h2>
<p>然后我们就可以在虚拟环境中安装依赖包了, 比如 flask 框架:</p>
<pre><code>pip install flask
</code></pre>
<p>比如我们可以升级 pip 的版本:</p>
<pre><code>pip install --upgrade pip
</code></pre>
<p>这时候，我们查看一下虚拟环境中的包依赖:</p>
<pre><code>$ pip list
Package      Version
------------ -------
click        7.1.2
Flask        1.1.2
itsdangerous 1.1.0
Jinja2       2.11.2
MarkupSafe   1.1.1
pip          20.1.1
setuptools   39.2.0
Werkzeug     1.0.1
</code></pre>
<h2 id="退出虚拟环境">退出虚拟环境</h2>
<p>如果要退出虚拟环境，我们可以使用 <code>deactivate</code> 。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python字符串详解]]></title>
        <id>https://blog.qianqian.fun/post/python-zi-fu-chuan-xiang-jie/</id>
        <link href="https://blog.qianqian.fun/post/python-zi-fu-chuan-xiang-jie/">
        </link>
        <updated>2020-04-25T09:54:56.000Z</updated>
        <content type="html"><![CDATA[<p>什么是字符串？其实就是字符，区分于其他的类型，比如说数字。下面展示的都是一些字符串:</p>
<pre><code>str1 = 'Hello World'
str2 = '123'
str3 = &quot;Let's go to moon&quot;
str4 = &quot;&quot;&quot;
   窗前明月光
   怀是滴上霜
&quot;&quot;&quot;
str5 = '''
   Left's go to moon
'''
</code></pre>
<h2 id="多种引号之间的区别">多种引号之间的区别</h2>
<p>在 Python 中，使用引号来包裹字符串内容。可以使用单引号、双引号以及像上面 <code>str4</code> 和 <code>str5</code> 那样使用连续的三个单引号或三个双引号来表示多行文本。</p>
<p>注意：这些引号都应该在英文输入法下输入，都是英文的引号，而不是中文。</p>
<p>那么单引号和双引号有什么区别呢？就如变量 <code>str3</code> 一样，双引号可以包含转义字符，比如 <code>'</code> 。如果在单引号中出现转义字符，则需要使用转移符号 <code>\</code> 进行转义，否则程序将出错:</p>
<pre><code>str1 = 'Let's go to moon'   # 这样写是错误的
str2 = 'Let\'s go to moon'  # 使用转义符号转义是正确的
str3 = &quot;Let's go to moon'   # 双引号不需要明确使用转义符号进行转义
</code></pre>
<p>通常这种情况，推荐使用双引号，看起来比较舒服，也无需关系转义字符导致的程序异常。</p>
<p>三引号又分为三个单引号和三个双引号，它们都是用来表示多行文本，并没有区别。也就是说，两种方式都可以使用。</p>
<p>多行文本用在，单行文本太长的情况下，或者需要换行的情况。比如我需要用一个字符串变量来包含一段 Python 代码:</p>
<pre><code>code = '''
from flask import Flask
app = Flask(__name__)
@app.route('/')
def index():
    return 'Hello World'
'''
# 引号并不要求单独写一行，但是习惯上单独写一行，较为直观。
</code></pre>
<p>这种情况下，就很适合使用多行文本。Python 会在每一行末尾加入 <code>\n</code> 转义字符，表示换行。</p>
<h2 id="什么是转义字符">什么是转义字符</h2>
<p>什么是转义字符？可以理解成是特殊的字符。那么它们特殊在哪里呢？</p>
<p><strong>其中一部分的转义字符是为了表示看不见的字符</strong>。我们很自然的以为，在键盘上敲击的每一个键都可以在屏幕上显示出起对应的字符。但实际上有一些键同样输出了字符，但在屏幕上并没有显示。比如说我们上面中出现的 <code>\n</code> 换行符。虽然看不见，但必须使用一个字符告诉计算机，我回车了。</p>
<p><strong>还有一类是在编程语言中，已经被语言本身使用并表示特殊含义的字符</strong>。比如说引号，在 Python 中使用一对引号来表示字符串。这时候如果在一对双引号中再次输入一个双引号，就会导致程序没有办法判断哪里是字符串的开始、哪里是字符串的结束。</p>
<p>还有一些其他的作用，但是没有必要去死记硬背。记住几个常用的就好了，比如说 <code>\n</code> 表示换行、 <code>\r</code> 表示回车、 <code>\t</code> 表示制表符(Tab键)。</p>
<p>转义符号 <code>\</code> 本身也是转义字符，如果我希望它能在字符串中输出，那么也应该对它进行转义，比如:</p>
<pre><code>print('转义符号: \\')
</code></pre>
<p>另外，我们也可以通过原始字符串(Raw String)的方式来表达:</p>
<pre><code>path = r'C:\Windows\system64\etc\derver\etc\hosts'
print(path)
</code></pre>
<h2 id="字符串的运算">字符串的运算</h2>
<p>我们在生活中，经常会对数值进行运算，那么什么叫做对字符串运算呢？我举一个例子：</p>
<pre><code>老板: 这个东西今天能做完吗？
我: 不能！
老板: 把不字去掉！
</code></pre>
<p>对，这就是字符串的运算之一，对字符串内容的剪切。除此之外，我们还经常回对字符串内容进行拼接、替换等操作。</p>
<h3 id="字符串的拼接">字符串的拼接:</h3>
<pre><code>print('Hello' + ' ' + 'World')
</code></pre>
<p>上面是字符串的“加法运算”，表示对字符串进行拼接。那么如果是乘法呢？</p>
<pre><code>print('Hello' * 3)  # HelloHelloHello
print('Hello' * 'World') # 语法错误
</code></pre>
<p>字符串(String)本质上是一串字符(Char)，是 Char 的列表。所以，我们也可以使用列表的形式来访问字符串:</p>
<pre><code>print('Hello'[0]) # H
print('Hello'[-1])  # o
print('Hello'[0:3]) # Hel
print('Hello'[0:-1]) # Hell
print('Hello'[1:])   # ello, 截取到末尾
</code></pre>
]]></content>
    </entry>
</feed>